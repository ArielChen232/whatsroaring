{"ast":null,"code":"import _classCallCheck from \"/Users/leitan/Developer/whatsroaring/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nvar CASClient = function CASClient() {\n  var _this = this;\n\n  _classCallCheck(this, CASClient);\n\n  this.casURL = 'https://fed.princeton.edu/cas/';\n\n  this.validate = function (ticket, callback) {\n    var val_url = _this.casURL + 'validate?service=' + encodeURIComponent(_this.serviceURL()) + '&ticket=' + encodeURIComponent(ticket);\n    console.log('validate url = ' + val_url);\n    fetch(val_url).then(function (resp) {\n      console.log('url opened');\n      var netid = null;\n      resp.text().then(function (text) {\n        text = text.split(\"\\n\");\n\n        if (text[0] == 'yes') {\n          netid = text[1];\n          console.log('validated netid: ' + netid);\n        }\n\n        callback(netid);\n      });\n    }); // var request = new XMLHttpRequest();\n    // request.open('GET', val_url, true);\n    // request.send();\n    // request.onreadystatechange = function () {\n    //   console.log('url opened')\n    //   if (request.readyState === 4 && request.status === 200) {\n    //     var netid = null\n    //     var lines = request.responseText;\n    //     lines = lines.split(\"\\n\")\n    //     if (lines[0] == 'yes') {\n    //       netid = lines[1]\n    //       console.log('validated netid: ' + netid)\n    //     }\n    //     callback(netid)\n    //   }\n    // }\n  };\n\n  this.authenticate = function (callback) {\n    // if username is stored, then user was already authenticated\n    var netid = localStorage.getItem('netid');\n    console.log('netid: ' + netid);\n\n    if (netid != null) {\n      callback();\n      return;\n    } // if request has a login ticket, try to validate it\n\n\n    var urlParams = new URLSearchParams(window.location.search);\n    var ticket = urlParams.get('ticket');\n    console.log('ticket: ' + ticket);\n\n    if (ticket) {\n      console.log('ticket received');\n\n      _this.validate(ticket, function (netid) {\n        if (netid != null) {\n          console.log('set netid to: ' + netid); // set netid in storage\n\n          localStorage.setItem('netid', netid);\n          callback();\n          return;\n        }\n      });\n    } // No valid ticket; redirect the browser to the login page to get one\n\n\n    console.log('no ticket found');\n    var login_url = _this.casURL + 'login?service=' + encodeURIComponent(_this.serviceURL());\n    console.log('Location: ' + login_url);\n    window.location.href = login_url;\n    return;\n  };\n\n  this.serviceURL = function () {\n    var url = window.location.href; // Remove the \"ticket\" parameter from the URL.\n\n    url = url.split(\"?\")[0]; // Remove a trailing question mark and/or ampersand.\n\n    url = url.replace(\"\\\\?&?$|&$\", \"\");\n    console.log('url:' + url);\n    return url;\n  };\n};\n\nexport { CASClient as default };","map":{"version":3,"sources":["/Users/leitan/Developer/whatsroaring/src/Pages/CASClient.js"],"names":["CASClient","casURL","validate","ticket","callback","val_url","encodeURIComponent","serviceURL","console","log","fetch","then","resp","netid","text","split","authenticate","localStorage","getItem","urlParams","URLSearchParams","window","location","search","get","setItem","login_url","href","url","replace"],"mappings":"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","sourcesContent":["export default class CASClient {\n  casURL = 'https://fed.princeton.edu/cas/'\n\n  validate = (ticket, callback) => {\n    const val_url = (this.casURL + 'validate?service=' +\n        encodeURIComponent(this.serviceURL()) + '&ticket=' +\n        encodeURIComponent(ticket))\n    console.log('validate url = ' + val_url)\n    fetch(val_url)\n      .then(resp => {\n        console.log('url opened')\n        var netid = null\n        resp.text().then(function (text) {\n          text = text.split(\"\\n\")\n          if (text[0] == 'yes') {\n            netid = text[1]\n            console.log('validated netid: ' + netid)\n          }\n          callback(netid)\n        })\n      })\n    // var request = new XMLHttpRequest();\n    // request.open('GET', val_url, true);\n    // request.send();\n    // request.onreadystatechange = function () {\n    //   console.log('url opened')\n    //   if (request.readyState === 4 && request.status === 200) {\n    //     var netid = null\n    //     var lines = request.responseText;\n    //     lines = lines.split(\"\\n\")\n    //     if (lines[0] == 'yes') {\n    //       netid = lines[1]\n    //       console.log('validated netid: ' + netid)\n    //     }\n    //     callback(netid)\n    //   }\n    // }\n  }\n\n  authenticate = (callback) => {\n    // if username is stored, then user was already authenticated\n    var netid = localStorage.getItem('netid')\n    console.log('netid: ' +  netid)\n    if (netid != null) {\n      callback()\n      return\n    }\n\n    // if request has a login ticket, try to validate it\n    const urlParams = new URLSearchParams(window.location.search);\n    const ticket = urlParams.get('ticket');\n    console.log('ticket: ' + ticket)\n    if (ticket) {\n      console.log('ticket received')\n      this.validate(ticket, function(netid) {\n        if (netid != null) {\n          console.log('set netid to: ' + netid)\n          // set netid in storage\n          localStorage.setItem('netid', netid)\n          callback()\n          return\n        }\n      })\n    }\n    // No valid ticket; redirect the browser to the login page to get one\n    console.log('no ticket found')\n    var login_url = this.casURL + 'login?service=' + encodeURIComponent(this.serviceURL())\n    console.log('Location: ' + login_url)\n    window.location.href = login_url\n    return\n  }\n\n  serviceURL = () => {\n    var url = window.location.href;\n    // Remove the \"ticket\" parameter from the URL.\n    url = url.split(\"?\")[0];\n    // Remove a trailing question mark and/or ampersand.\n    url = url.replace(\"\\\\?&?$|&$\", \"\");\n    console.log('url:' + url)\n    return url;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}